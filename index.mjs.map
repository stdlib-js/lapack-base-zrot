{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/zrot.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport reinterpret from '@stdlib/strided-base-reinterpret-complex128';\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex128} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.3, 0.4 );\n*\n* zrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-1.1\n*\n* var im = imag( z );\n* // returns ~-0.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sr;\n\tvar si;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar yr;\n\tvar yi;\n\tvar xr;\n\tvar xi;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\n\tsr = real( s );\n\tsi = imag( s );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyr = viewY[ iy ];\n\t\tyi = viewY[ iy+1 ];\n\t\txr = viewX[ ix ];\n\t\txi = viewX[ ix+1 ];\n\n\t\t// Compute tmp = c * zx[ ix ] + s * zy[ iy ]\n\t\tviewX[ ix ] = ( c*xr ) + ( ( sr*yr ) - ( si*yi ) );\n\t\tviewX[ ix+1 ] = ( c*xi ) + ( ( sr*yi ) + ( si*yr ) );\n\n\t\t// Compute zy[ iy ] = c * zy[ iy ] - conj(s) * zx[ ix ]\n\t\tviewY[ iy ] = ( c*yr ) - ( ( sr*xr ) + ( si*xi ) );\n\t\tviewY[ iy+1 ] = ( c*yi ) - ( ( sr*xi ) - ( si*xr ) );\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nexport default zrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex128} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* import Complex128Array from '@stdlib/array-complex128';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import real from '@stdlib/complex-float64-real';\n* import imag from '@stdlib/complex-float64-imag';\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.3, 0.4 );\n*\n* zrot( zx.length, zx, 1, zy, 1, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-1.1\n*\n* var im = imag( z );\n* // returns ~-0.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nexport default zrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport zrot from './zrot.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( zrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default zrot;\n"],"names":["zrot","N","zx","strideX","offsetX","zy","strideY","offsetY","c","s","viewX","viewY","sr","si","sx","sy","ix","iy","yr","yi","xr","xi","i","reinterpret","real","imag","ndarray","stride2offset","setReadOnly"],"mappings":";;ygBAyEA,SAASA,EAAMC,EAAGC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASC,EAAGC,GAChE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKrB,GAAK,EACT,OAAOI,EAcR,IAZAK,EAAQa,EAAarB,EAAI,GACzBS,EAAQY,EAAalB,EAAI,GAEzBW,EAAe,EAAVZ,EACLa,EAAe,EAAVV,EAELO,EAAe,EAAVX,EACLY,EAAe,EAAVT,EAELM,EAAKY,EAAMf,GACXI,EAAKY,EAAMhB,GAELa,EAAI,EAAGA,EAAIrB,EAAGqB,IACnBJ,EAAKP,EAAOM,GACZE,EAAKR,EAAOM,EAAG,GACfG,EAAKV,EAAOM,GACZK,EAAKX,EAAOM,EAAG,GAGfN,EAAOM,GAASR,EAAEY,GAAWR,EAAGM,EAASL,EAAGM,GAC5CT,EAAOM,EAAG,GAAQR,EAAEa,GAAWT,EAAGO,EAASN,EAAGK,GAG9CP,EAAOM,GAAST,EAAEU,GAAWN,EAAGQ,EAASP,EAAGQ,GAC5CV,EAAOM,EAAG,GAAQT,EAAEW,GAAWP,EAAGS,EAASR,EAAGO,GAE9CJ,GAAMF,EACNG,GAAMF,EAEP,OAAOV,CACR,CCnDA,SAASL,EAAMC,EAAGC,EAAIC,EAASE,EAAIC,EAASE,EAAGC,GAG9C,OAAOiB,EAASzB,EAAGC,EAAIC,EAFdwB,EAAe1B,EAAGE,GAESE,EAAIC,EAD/BqB,EAAe1B,EAAGK,GAC0BE,EAAGC,EACzD,CC7CAmB,EAAA5B,EAAA,UAAA0B"}
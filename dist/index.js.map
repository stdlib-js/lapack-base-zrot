{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/zrot.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar reinterpret = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {NonNegativeInteger} offsetX - starting `zx` index\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {NonNegativeInteger} offsetY - starting `zy` index\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex128} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.3, 0.4 );\n*\n* zrot( zx.length, zx, 1, 0, zy, 1, 0, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-1.1\n*\n* var im = imag( z );\n* // returns ~-0.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zrot( N, zx, strideX, offsetX, zy, strideY, offsetY, c, s ) {\n\tvar viewX;\n\tvar viewY;\n\tvar sr;\n\tvar si;\n\tvar sx;\n\tvar sy;\n\tvar ix;\n\tvar iy;\n\tvar yr;\n\tvar yi;\n\tvar xr;\n\tvar xi;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn zy;\n\t}\n\tviewX = reinterpret( zx, 0 );\n\tviewY = reinterpret( zy, 0 );\n\n\tix = offsetX * 2;\n\tiy = offsetY * 2;\n\n\tsx = strideX * 2;\n\tsy = strideY * 2;\n\n\tsr = real( s );\n\tsi = imag( s );\n\n\tfor ( i = 0; i < N; i++ ) {\n\t\tyr = viewY[ iy ];\n\t\tyi = viewY[ iy+1 ];\n\t\txr = viewX[ ix ];\n\t\txi = viewX[ ix+1 ];\n\n\t\t// Compute tmp = c * zx[ ix ] + s * zy[ iy ]\n\t\tviewX[ ix ] = ( c*xr ) + ( ( sr*yr ) - ( si*yi ) );\n\t\tviewX[ ix+1 ] = ( c*xi ) + ( ( sr*yi ) + ( si*yr ) );\n\n\t\t// Compute zy[ iy ] = c * zy[ iy ] - conj(s) * zx[ ix ]\n\t\tviewY[ iy ] = ( c*yr ) - ( ( sr*xr ) + ( si*xi ) );\n\t\tviewY[ iy+1 ] = ( c*yi ) - ( ( sr*xi ) - ( si*xr ) );\n\n\t\tix += sx;\n\t\tiy += sy;\n\t}\n\treturn zy;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a plane rotation with real cosine and complex sine.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex128Array} zx - first input array\n* @param {integer} strideX - `zx` stride length\n* @param {Complex128Array} zy - second input array\n* @param {integer} strideY - `zy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {Complex128} s - sine of the angle of rotation\n* @returns {Complex128Array} `zy`\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.3, 0.4 );\n*\n* zrot( zx.length, zx, 1, zy, 1, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-1.1\n*\n* var im = imag( z );\n* // returns ~-0.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\nfunction zrot( N, zx, strideX, zy, strideY, c, s ) {\n\tvar ix = stride2offset( N, strideX );\n\tvar iy = stride2offset( N, strideY );\n\treturn ndarray( N, zx, strideX, ix, zy, strideY, iy, c, s );\n}\n\n\n// EXPORTS //\n\nmodule.exports = zrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar zrot = require( './zrot.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( zrot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = zrot;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* LAPACK auxiliary routine to apply a plane rotation with real cosine and complex sine.\n*\n* @module @stdlib/lapack-base-zrot\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var Complex128 = require( '@stdlib/complex-float64' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var zrot = require( '@stdlib/lapack-base-zrot' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.6, 0 );\n*\n* zrot( zx.length, zx, 1, zy, 1, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*\n* @example\n* var Complex128Array = require( '@stdlib/array-complex128' );\n* var real = require( '@stdlib/complex-float64-real' );\n* var imag = require( '@stdlib/complex-float64-imag' );\n* var zrot = require( '@stdlib/lapack-base-zrot' );\n*\n* var zx = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\n* var zy = new Complex128Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n* var s = new Complex128( 0.6, 0 );\n*\n* zrot.ndarray( zx.length, zx, 1, 0, zy, 1, 0, 0.8, s );\n*\n* var z = zy.get( 0 );\n* // returns <Complex128>\n*\n* var re = real( z );\n* // returns ~-0.6\n*\n* var im = imag( z );\n* // returns ~-1.2\n*\n* z = zx.get( 0 );\n* // returns <Complex128>\n*\n* re = real( z );\n* // returns ~0.8\n*\n* im = imag( z );\n* // returns ~1.6\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar zrot;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tzrot = main;\n} else {\n\tzrot = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = zrot;\n\n// exports: { \"ndarray\": \"zrot.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,6CAA8C,EACrEC,EAAO,QAAS,8BAA+B,EAC/CC,EAAO,QAAS,8BAA+B,EAiDnD,SAASC,EAAMC,EAAGC,EAAIC,EAASC,EAASC,EAAIC,EAASC,EAASC,EAAGC,EAAI,CACpE,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKrB,GAAK,EACT,OAAOI,EAcR,IAZAK,EAAQb,EAAaK,EAAI,CAAE,EAC3BS,EAAQd,EAAaQ,EAAI,CAAE,EAE3BW,EAAKZ,EAAU,EACfa,EAAKV,EAAU,EAEfO,EAAKX,EAAU,EACfY,EAAKT,EAAU,EAEfM,EAAKd,EAAMW,CAAE,EACbI,EAAKd,EAAMU,CAAE,EAEPa,EAAI,EAAGA,EAAIrB,EAAGqB,IACnBJ,EAAKP,EAAOM,CAAG,EACfE,EAAKR,EAAOM,EAAG,CAAE,EACjBG,EAAKV,EAAOM,CAAG,EACfK,EAAKX,EAAOM,EAAG,CAAE,EAGjBN,EAAOM,CAAG,EAAMR,EAAEY,GAAWR,EAAGM,EAASL,EAAGM,GAC5CT,EAAOM,EAAG,CAAE,EAAMR,EAAEa,GAAWT,EAAGO,EAASN,EAAGK,GAG9CP,EAAOM,CAAG,EAAMT,EAAEU,GAAWN,EAAGQ,EAASP,EAAGQ,GAC5CV,EAAOM,EAAG,CAAE,EAAMT,EAAEW,GAAWP,EAAGS,EAASR,EAAGO,GAE9CJ,GAAMF,EACNG,GAAMF,EAEP,OAAOV,CACR,CAKAT,EAAO,QAAUI,IC9HjB,IAAAuB,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IA+Cd,SAASC,EAAMC,EAAGC,EAAIC,EAASC,EAAIC,EAAS,EAAGC,EAAI,CAClD,IAAIC,EAAKT,EAAeG,EAAGE,CAAQ,EAC/BK,EAAKV,EAAeG,EAAGI,CAAQ,EACnC,OAAON,EAASE,EAAGC,EAAIC,EAASI,EAAIH,EAAIC,EAASG,EAAI,EAAGF,CAAE,CAC3D,CAKAT,EAAO,QAAUG,IC/EjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtCH,EAAO,QAAUE,ICuDjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAOD,EAEPC,EAAOC,EAMR,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "reinterpret", "real", "imag", "zrot", "N", "zx", "strideX", "offsetX", "zy", "strideY", "offsetY", "c", "s", "viewX", "viewY", "sr", "si", "sx", "sy", "ix", "iy", "yr", "yi", "xr", "xi", "i", "require_zrot", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "zrot", "N", "zx", "strideX", "zy", "strideY", "s", "ix", "iy", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "zrot", "ndarray", "join", "tryRequire", "isError", "main", "zrot", "tmp"]
}
